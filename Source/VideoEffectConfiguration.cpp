#include "pch.h"
#include "VideoEffectConfiguration.h"
#include "VideoEffectConfiguration.g.cpp"
#include <winrt/Windows.UI.Xaml.Controls.h>
// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
//static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::FFmpegInteropX::implementation
{
    float VideoEffectConfiguration::Brightness()
    {
        return _Brightness;
    }
    void VideoEffectConfiguration::Brightness(float value)
    {
        _Brightness = value;
    }
    float VideoEffectConfiguration::Contrast()
    {
        return _Contrast;
    }
    void VideoEffectConfiguration::Contrast(float value)
    {
        _Contrast = value;
    }
    float VideoEffectConfiguration::Saturation()
    {
        return _Saturation;
    }
    void VideoEffectConfiguration::Saturation(float value)
    {
        _Saturation = value;
    }
    float VideoEffectConfiguration::Temperature()
    {
        return _Temperature;
    }
    void VideoEffectConfiguration::Temperature(float value)
    {
        if (value < -1 || value > 1)
        {
            throw_hresult(E_INVALIDARG);
        }
        _Temperature = value;
    }
    float VideoEffectConfiguration::Tint()
    {
        return _Tint;
    }
    void VideoEffectConfiguration::Tint(float value)
    {
        if (value < -1 || value > 1)
        {
            throw_hresult(E_INVALIDARG);
        }
        _Tint = value;
    }
    float VideoEffectConfiguration::Sharpness()
    {
        return _Sharpness;
    }
    void VideoEffectConfiguration::Sharpness(float value)
    {
        if (value < 0 || value > 10)
        {
            throw_hresult(E_INVALIDARG);
        }
        _Sharpness = value;
    }
    float VideoEffectConfiguration::SharpnessThreshold()
    {
        return _SharpnessThreshold;
    }
    void VideoEffectConfiguration::SharpnessThreshold(float value)
    {
        if (value < 0 || value > 10)
        {
            throw_hresult(E_INVALIDARG);
        }
        _SharpnessThreshold = value;
    }
    void VideoEffectConfiguration::AddVideoEffect(winrt::Windows::Media::Playback::MediaPlayer const& player)
    {
        auto set = winrt::Windows::Foundation::Collections::PropertySet();
        set.Insert(L"config", *this);
        player.AddVideoEffect(winrt::name_of<winrt::FFmpegInteropX::BasicVideoEffect>(), true, set);
    }
    void VideoEffectConfiguration::AddVideoEffect(winrt::Windows::Media::Playback::MediaPlayer const& player, bool isOptional)
    {
        auto set = winrt::Windows::Foundation::Collections::PropertySet();
        set.Insert(L"config", *this);
        player.AddVideoEffect(winrt::name_of<winrt::FFmpegInteropX::BasicVideoEffect>(), isOptional, set);
    }
}
